// This file was automatically generated by informer-gen

package v1alpha1

import (
	tryapi_v1alpha1 "github.com/nightfury1204/test-apiserver/pkg/apis/tryapi/v1alpha1"
	clientset "github.com/nightfury1204/test-apiserver/pkg/client/clientset_generated/clientset"
	internalinterfaces "github.com/nightfury1204/test-apiserver/pkg/client/informers_generated/externalversions/internalinterfaces"
	v1alpha1 "github.com/nightfury1204/test-apiserver/pkg/client/listers_generated/tryapi/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// EyeInformer provides access to a shared informer and lister for
// Eyes.
type EyeInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.EyeLister
}

type eyeInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewEyeInformer constructs a new informer for Eye type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEyeInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredEyeInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredEyeInformer constructs a new informer for Eye type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredEyeInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TryapiV1alpha1().Eyes(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TryapiV1alpha1().Eyes(namespace).Watch(options)
			},
		},
		&tryapi_v1alpha1.Eye{},
		resyncPeriod,
		indexers,
	)
}

func (f *eyeInformer) defaultInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredEyeInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *eyeInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&tryapi_v1alpha1.Eye{}, f.defaultInformer)
}

func (f *eyeInformer) Lister() v1alpha1.EyeLister {
	return v1alpha1.NewEyeLister(f.Informer().GetIndexer())
}
