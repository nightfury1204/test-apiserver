/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/nightfury1204/test-apiserver/pkg/apis/tryapi/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PlayerLister helps list Players.
type PlayerLister interface {
	// List lists all Players in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Player, err error)
	// Players returns an object that can list and get Players.
	Players(namespace string) PlayerNamespaceLister
	PlayerListerExpansion
}

// playerLister implements the PlayerLister interface.
type playerLister struct {
	indexer cache.Indexer
}

// NewPlayerLister returns a new PlayerLister.
func NewPlayerLister(indexer cache.Indexer) PlayerLister {
	return &playerLister{indexer: indexer}
}

// List lists all Players in the indexer.
func (s *playerLister) List(selector labels.Selector) (ret []*v1alpha1.Player, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Player))
	})
	return ret, err
}

// Players returns an object that can list and get Players.
func (s *playerLister) Players(namespace string) PlayerNamespaceLister {
	return playerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PlayerNamespaceLister helps list and get Players.
type PlayerNamespaceLister interface {
	// List lists all Players in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Player, err error)
	// Get retrieves the Player from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Player, error)
	PlayerNamespaceListerExpansion
}

// playerNamespaceLister implements the PlayerNamespaceLister
// interface.
type playerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Players in the indexer for a given namespace.
func (s playerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Player, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Player))
	})
	return ret, err
}

// Get retrieves the Player from the indexer for a given namespace and name.
func (s playerNamespaceLister) Get(name string) (*v1alpha1.Player, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("player"), name)
	}
	return obj.(*v1alpha1.Player), nil
}
